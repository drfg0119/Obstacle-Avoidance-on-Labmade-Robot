// Generated by gencpp from file relative_angle_nb/Apl.msg
// DO NOT EDIT!


#ifndef RELATIVE_ANGLE_NB_MESSAGE_APL_H
#define RELATIVE_ANGLE_NB_MESSAGE_APL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace relative_angle_nb
{
template <class ContainerAllocator>
struct Apl_
{
  typedef Apl_<ContainerAllocator> Type;

  Apl_()
    : obs_dist(0)
    , obs_direct(0.0)
    , goal_x(0.0)
    , goal_y(0.0)
    , obs_latelitude(0)  {
    }
  Apl_(const ContainerAllocator& _alloc)
    : obs_dist(0)
    , obs_direct(0.0)
    , goal_x(0.0)
    , goal_y(0.0)
    , obs_latelitude(0)  {
  (void)_alloc;
    }



   typedef uint16_t _obs_dist_type;
  _obs_dist_type obs_dist;

   typedef float _obs_direct_type;
  _obs_direct_type obs_direct;

   typedef float _goal_x_type;
  _goal_x_type goal_x;

   typedef float _goal_y_type;
  _goal_y_type goal_y;

   typedef int32_t _obs_latelitude_type;
  _obs_latelitude_type obs_latelitude;





  typedef boost::shared_ptr< ::relative_angle_nb::Apl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::relative_angle_nb::Apl_<ContainerAllocator> const> ConstPtr;

}; // struct Apl_

typedef ::relative_angle_nb::Apl_<std::allocator<void> > Apl;

typedef boost::shared_ptr< ::relative_angle_nb::Apl > AplPtr;
typedef boost::shared_ptr< ::relative_angle_nb::Apl const> AplConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::relative_angle_nb::Apl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::relative_angle_nb::Apl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace relative_angle_nb

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'relative_angle_nb': ['/home/apl/catkin_ws2/src/relative_angle_nb/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'darknet_ros_msgs': ['/home/apl/catkin_ws2/src/darknet_ros/darknet_ros_msgs/msg', '/home/apl/catkin_ws2/devel/share/darknet_ros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::relative_angle_nb::Apl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::relative_angle_nb::Apl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::relative_angle_nb::Apl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::relative_angle_nb::Apl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::relative_angle_nb::Apl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::relative_angle_nb::Apl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::relative_angle_nb::Apl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9809d650616fd3c284b0b4b27cd2e9fe";
  }

  static const char* value(const ::relative_angle_nb::Apl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9809d650616fd3c2ULL;
  static const uint64_t static_value2 = 0x84b0b4b27cd2e9feULL;
};

template<class ContainerAllocator>
struct DataType< ::relative_angle_nb::Apl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "relative_angle_nb/Apl";
  }

  static const char* value(const ::relative_angle_nb::Apl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::relative_angle_nb::Apl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 obs_dist\n\
float32 obs_direct\n\
float32 goal_x\n\
float32 goal_y\n\
int32 obs_latelitude\n\
";
  }

  static const char* value(const ::relative_angle_nb::Apl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::relative_angle_nb::Apl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obs_dist);
      stream.next(m.obs_direct);
      stream.next(m.goal_x);
      stream.next(m.goal_y);
      stream.next(m.obs_latelitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Apl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::relative_angle_nb::Apl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::relative_angle_nb::Apl_<ContainerAllocator>& v)
  {
    s << indent << "obs_dist: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obs_dist);
    s << indent << "obs_direct: ";
    Printer<float>::stream(s, indent + "  ", v.obs_direct);
    s << indent << "goal_x: ";
    Printer<float>::stream(s, indent + "  ", v.goal_x);
    s << indent << "goal_y: ";
    Printer<float>::stream(s, indent + "  ", v.goal_y);
    s << indent << "obs_latelitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs_latelitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RELATIVE_ANGLE_NB_MESSAGE_APL_H
